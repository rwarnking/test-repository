############################
############################
## Release GitHub Actions ##
############################
############################
name: Create Release

#################################
# Start the job on push to main #
#################################
on:
  push:
    branches:
      - main

# Set the Jobs
jobs:
  ####################
  # Add and push tag #
  ####################
  create_tag:
    # Name the Job
    name: Create the tag
    # Set the agent to run on
    runs-on: ubuntu-latest

    # Load all steps
    steps:
      # Checkout the code base
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Get last commit message
      - name: Show commit message
        run: echo "${{ github.event.head_commit.message }}"
      - name: Set commit message to var
        run: echo "commitmsg=${{ github.event.head_commit.message }}" >> $GITHUB_ENV
      - name: Show var
        run: echo "${{ env.commitmsg }}"
      # Get last tag
      # https://github.com/marketplace/actions/get-latest-tag
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.1.0
      # Create new tag
      - name: 'Get next minor version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}
      # Set github data
      - name: Set access data
        run: |
          git config --global user.name 'rwarnking'
          git config --global user.email 'rwarnking@users.noreply.github.com'
      # Add and push tag
      - name: Check for Major version
        if: contains(env.commitmsg , 'Major:')
        run: |
          git tag -a ${{ steps.semvers.outputs.v_major }} -m "New version ${{ steps.semvers.outputs.v_major }}"
          git push origin ${{ steps.semvers.outputs.v_major }}
      - name: Check for Minor version
        if: contains(env.commitmsg , 'Minor:')
        run: |
          git tag -a ${{ steps.semvers.outputs.v_minor }} -m "New version ${{ steps.semvers.outputs.v_minor }}"
          git push origin ${{ steps.semvers.outputs.v_minor }}
      - name: Check for Patch
        if: contains(env.commitmsg , 'Patch:')
        run: |
          git tag -a ${{ steps.semvers.outputs.v_patch }} -m "New version ${{ steps.semvers.outputs.v_patch }}"
          git push origin ${{ steps.semvers.outputs.v_patch }}

  ##################
  # Create release #
  ##################
  create_release:
    # Name the Job
    name: Create Release
    # Set the agent to run on
    runs-on: ubuntu-latest
    # Requires
    needs: create_tag

    outputs:
      upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
      version: ${{ steps.set_version.outputs.version }}

    # Load all steps
    steps:
      # Checkout the code base
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Get last tag
      # https://github.com/marketplace/actions/get-latest-tag
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      # Create release
      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.previoustag.outputs.tag }}
          release_name: Release ${{ steps.previoustag.outputs.tag }}
          draft: false
          prerelease: false
      # Setup URL
      - id: set_upload_url
        run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"
      - id: set_version
        run: echo "::set-output name=version::${{ steps.previoustag.outputs.tag }}"

  #####################
  # Upload to release #
  #####################
  upload_to_release:
    # Name the Job
    name: Upload to Release
    # Set the agent to run on
    runs-on: ubuntu-latest
    # Requires
    needs: create_release
    # Load all steps
    steps:
      # Checkout the code base
      - name: Checkout
        uses: actions/checkout@v2
      # Zip files
      - name: Zip files
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r /src/src.zip src
      # Upload
      - name: Upload
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./src/src.zip
          asset_name: pdf_collection_${{ needs.create_release.outputs.version }}.zip
          asset_content_type: application/zip
